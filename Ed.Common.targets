<?xml version="1.0" encoding="utf-8"?>

<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

<!-- Versioning, Copyright etc. -->
    <PropertyGroup>
        <ReleaseTagDescriptionScript Condition=" '$(ReleaseTagDescriptionScript)' == '' "><![CDATA[git describe --tags --match Release-*.*.* --long]]></ReleaseTagDescriptionScript>
        <LatestCommitTimestampScript Condition=" '$(LatestCommitTimestampScript)' == '' "><![CDATA[git log -1 --format=%%cI]]></LatestCommitTimestampScript>
        <ArtifactsDirectory Condition=" '$(ArtifactsDirectory)' == '' ">$(SolutionDir)artifacts\</ArtifactsDirectory>
        <Company>ED</Company>
        <Authors Condition=" '$(Authors)' == '' ">$(Company)</Authors>
        <Copyright>Copyright Â© 2024-2025 $(Company)</Copyright>
        <PackageOutputPath>$(ArtifactsDirectory)</PackageOutputPath>
        <GetPackageVersionDependsOn>ParseReleaseTagDescription;$(GetPackageVersionDependsOn)</GetPackageVersionDependsOn>
    </PropertyGroup>

    <Target Name="QueryReleaseTagDescription">
        <Exec Command="$(ReleaseTagDescriptionScript)" ConsoleToMSBuild="true">
            <Output TaskParameter="ConsoleOutput" PropertyName="ReleaseTagDescription" />
        </Exec>
    </Target>

    <Target Name="QueryLatestCommitTimestamp">
        <Exec Command="$(LatestCommitTimestampScript)" ConsoleToMSBuild="true">
            <Output TaskParameter="ConsoleOutput" PropertyName="LatestCommitTimestamp" />
        </Exec>
    </Target>

    <Target Name="ParseReleaseTagDescription" DependsOnTargets="QueryReleaseTagDescription;QueryLatestCommitTimestamp" BeforeTargets="GenerateNuspec;PrepareForBuild">
        <PropertyGroup>
            <VersionThree>$(ReleaseTagDescription.Split('-')[1])</VersionThree>
            <VersionFourthNumber>$(ReleaseTagDescription.Split('-')[2])</VersionFourthNumber>
            <PaddedVersionFourthNumber>$(VersionFourthNumber)</PaddedVersionFourthNumber> 
            <PaddedVersionFourthNumber Condition="$(VersionFourthNumber) &lt; 100">0$(VersionFourthNumber)</PaddedVersionFourthNumber> 
            <PaddedVersionFourthNumber Condition="$(VersionFourthNumber) &lt; 10">00$(VersionFourthNumber)</PaddedVersionFourthNumber> 
            <VersionThree Condition=" $(VersionFourthNumber) != '0' ">$(VersionThree.Split('.')[0]).$(VersionThree.Split('.')[1]).$([MSBuild]::Add($(VersionThree.Split('.')[2]), 1))</VersionThree>
            <FileVersion>$(VersionThree).$(VersionFourthNumber)</FileVersion>
            <PackageVersion>v$(VersionThree)</PackageVersion>
            <PackageVersion Condition=" $(VersionFourthNumber) != '0' ">v$(VersionThree)-rc$(PaddedVersionFourthNumber)</PackageVersion>
            <Version>$(PackageVersion)</Version>
            <Description>$(LatestCommitTimestamp)</Description>
        </PropertyGroup>
        <message Importance="high" text="Version, PackageVersion: $(Version). FileVersion: $(FileVersion)." />
    </Target>

<!-- Delete old NuGets -->
    <Target Name="CleanUpOldNupkgs" BeforeTargets="GenerateNuspec">
        <ItemGroup>
            <FilesToDelete Include="$(ArtifactsDirectory)$(PackageId).*.*" />
        </ItemGroup>
        <message Condition=" '@(FilesToDelete)' != '' " Importance="high" text="Old packages to delete: @(FilesToDelete)" />
        <message Condition=" '@(FilesToDelete)' == '' " Importance="high" text="Old packages to delete: None" />
        <Delete Condition=" '@(FilesToDelete)' != '' " Files="@(FilesToDelete)" />
    </Target>
    
<!-- Signing -->
    <Target Name="SignAfterPublish" Condition=" Exists('$(ProjectDir)GenerateCertificate.ps1') "
        AfterTargets="Publish">
        <message Text="Signing: TargetPath: $(TargetPath)" importance="high" />
        <PropertyGroup>
          <CertificatePassword Condition=" '$(CertificatePassword)' == '' ">P@SsW0Rd!</CertificatePassword>
          <PublishedExePathName>$(PublishDir)$(AssemblyName).exe</PublishedExePathName>
          <UWPSDKVersion>$([Microsoft.Build.Utilities.ToolLocationHelper]::GetLatestSDKTargetPlatformVersion('Windows', '10.0'))</UWPSDKVersion>
          <UWPSDKPath>$([Microsoft.Build.Utilities.ToolLocationHelper]::GetPlatformSDKLocation('Windows', '10.0'))bin\$(UWPSDKVersion)</UWPSDKPath>
          <UWPSDKPathX64>$(UWPSDKPath)\x64</UWPSDKPathX64>
          <SignToolPathX64>$(UWPSDKPathX64)\signtool.exe</SignToolPathX64>
        </PropertyGroup>
        <Exec Command="pwsh -ExecutionPolicy Bypass -File &quot;$(ProjectDir)GenerateCertificate.ps1&quot; -CertificatePassword $(CertificatePassword)" />
        <Exec Command="&quot;$(SignToolPathX64)&quot; sign /fd sha256 /td sha256 /f &quot;$(ProjectDir)CodeSign.pfx&quot; /p $(CertificatePassword) /tr http://timestamp.digicert.com &quot;$(PublishedExePathName)&quot;" StandardOutputImportance="high" />
    </Target>

<!-- Include specific target-files -->
    <Import Project="$(SolutionDir)$(SolutionName).Common.targets"
            Condition="Exists('$(SolutionDir)$(SolutionName).Common.targets')" />
    <Import Condition="Exists('$(LocalTargets)')" Project="$(LocalTargets)" />

</Project>
